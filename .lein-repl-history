(+ 1 2)
'( a b c)
(comment emmle is naughty)
(def vowel (set "aeiou"))
(vowel a)
(vowel 'a)
(vowel "a")
(def vowel? (set "aeiou"))
(vowel? "a")
(vowel? "b")
(defn pig-latin [word] ; defines a function
  ; word is expected to be a string
  ; which can be treated like a sequence of characters.
  (let [first-letter (first word)] ; assigns a local binding
    (if (vowel? first-letter)
      (str word "ay") ; then part of if
      (str (subs word 1) first-letter "ay")))) ; else part of if
(println (pig-latin "red"))
(println (pig-latin "orange"))
(vowel?)
(vowel? "cave")
(println (vowel? "cave"))
(pig-latin "orange")
(println 'vowel?)
(println vowel?)
(vowel? "base")
(vowel? "b")
(if (vowel? "b") "vowel")
(if (vowel? "b") "vowel" "cat")
(if (vowel? "a") "vowel" "cat")
(if (vowel? "a") (println "vowel") (println "cat"))
(if (vowel? "b") (println "vowel") (println "cat"))
(if (vowel? (first "base")) (println "vowel") (println "cat"))
(if (vowel? (first "ase")) (println "vowel") (println "cat"))
(vowel? (first "ase"))
(vowel? (first "base"))
(vowel? (first "iase"))
(vowel? (first "i"))
(doc first)
(vowel? ([a]))
(vowel? (["a"]))
(vowel? ("a"))
(vowel? ["a"])
(vowel? 'a)
(doc type)
(type "a")
(type (first "a"))
('vowel)
(println 'vowel)
(println vowel)
(vowel (first "a"))
(doc vowel)
(doc user/vowel)
(doc vowel?)
(doc defn)
(def params*)
(println params*)
(type params*)
(docs ^)
(doc ^)
(def ^:dynamic v 1) ; v is a global binding
(defn f1 []
  (println "f1: v:" v)) 
(defn f2 []
  (println "f2: before let v:" v) 
  ; creates local binding v that shadows global one
  (let [v 2]
    ; local binding only within this let statement
    (println "f2: in let, v:" v)
    (f1))
  ; outside of this let, v refers to global binding
  (println "f2: after let v:" v))
(defn f3 []
  (println "f3: before binding v:" v) 
  ; same global binding with new, temporary value
  (binding [v 3] 
    ; global binding, new value
    (println "f3: within binding function v: " v) 
    (f1)) ; calling f1 with new value to v
  ; outside of binding v refers to first global value
  (println "f3: after binding v:" v)) 
(defn f4 []
 (def v 4)) ; changes the value of v in the global scope
(println "(= v 1) => " (= v 1))
